1.T-SQL分类：
    DDL：数据定义语言。如:Create,Drop,Alter等对表对象的操作。
    DML：数据操作语言。Select,Update.对表内部数据的增删改查。
    DCL：数据控制语言。各种权限的管理。
    TML：事务管理语言。COMMIT和ROOLBACK对事务的操作。
    
    
2.索引
    索引：类似于书本的索引,在数据库中索引是表数据与相应位置的列表。建立在列上面。
    
    索引的分类:
        聚集索引:数据表的物理顺序和索引顺序相同的索引。
            数据页是叶结点,其上的索引也是非页级。
            因为页的顺序有序,应该在表中经常搜索的列或按序访问的列行创建聚集索引。
            
        非聚集索引:表的物理顺序和索引顺序不相同的索引。
            叶节点由数据页变成了索引页。
            因为非聚集索引表示行的逻辑顺序,所以多种方式检索的时候非聚集索引非常有用。
            
        默认情况创建的是非聚集索引,在每一个表中最多可创建249个非聚集索引,而聚集索引就只能有一个。
        
        其他类型索引或索引表现形式: 
            唯一性索引:索引键各不相同。主键约束等于唯一性的聚集索引。
            包含性索引:多个列字节总数大于索引列字节数的规定值时，使用这个。只能用于非聚集索引。
            索引视图:视图物理化,将结果集永久保存在索引中。
            全文索引:系统维护的一种基于标记的索引。目的:高效在字符串中搜索复杂词语。
            XML索引：与XML数据关联的索引形式。
            
    创建索引的好处：提高系统的性能。
        1>.创建唯一性索引,可以保证每一行数据的唯一性。
        2>.大大加快数据的检索速度。
        3>.加速表和表的连接,实现数据的参考完整性特别有意义。
        4>.OrderBy和GroupBy子句进行检索时,显著的减少查询中分组和排序的时间。
        5>.查询过程中,使用优化隐藏器,提高系统的性能。
        
    不对表中每一列都建立索引的原因:
        1>.创建和维护索引也需要消耗时间。
        2>.索引需要占用物理空间,特别是聚集索引。
        3>.对表数据增删改的时候索引仍旧需要动态的维护,降低了数据的维护速度。
        
    建立索引的指导原则:
      应该建立索引的原则:
        1>.经常需要搜索的列上创建索引;
        2>.主键上创建索引;
        3>.经常用于连接的外键上建立索引;
        4>.在经常根据范围进行搜索的列上建立索引;因为索引已经排序,范围是连续的。
        5>.在经常需要排序的列上建立索引,利用索引的排序加快速度。
        6>.在经常使用where子句的列上建立索引。
        
      不应该建立索引的情况:
        1>.对在查询中很少使用和参考的列不应该建立索引;不能提高查询速度,且降低了系统的维护速度和空间需求。
        2>.列中的值很少的列也不建立索引;很少用；
        3>.但增删改的性能远远大于查询性能时页布建立索引;索引对于二者是相反的。提高一方性能则会降低另一方的性能。
        
      创建索引的方式:表上的聚集索引最多一个,但是唯一性索引可以有多个。
         直接方法:使用命令或工具直接创建索引。如CREATE INDEX语句。
         
         间接方法:通过创建其他对象间接的创建索引。
            通过定义主键约束:系统自动创建了一个唯一性的聚集索引。
            通过定义唯一性约束：系统创建了一个唯一性的非聚集索引。
           间接方法创建的索引优先级高于直接方法通过语句创建的索引。
    
    3.查询优化
        例:SELECT * FROM TB_TABLE WHERE A='XXX' AND B='ZZZ'中,A,B均有单独的索引。
        查询优化器计算结果:A列的选择性是0.2%,而B列的选择性是30%；因此查询优化器基于A列的索引执行计划.
        MSSQL提供的三种连接技术:
            LOOP连接：表中每一行都与内表中的所有行进行比较。效率低下。只有但内表中的连接列上有索引时这中连接技术才会有效。
            MERGE连接：内表与外表的数据是按照连接列进行物理存储,使用MERGE技术才是一个好的选择,此时查询优化器不需要索引。反之不要用。
            Hash连接：两个表无任何顺序且都没有索引,考虑使用HASH连接。
